//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ENUMS
enum USER_ROLE {
  CUSTOMER
  ADMIN
  MANAGER
}

enum ORDER_STATUS {
  DRAFT
  CONFIRMED
  PROCESSING
  FULFILLED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  CANCELED
  REFUNDED
}

enum CATEGORY_TYPE {
  COCOA_BAR
  COCOA_POWDER
}

enum COCOA_POWDER_PACKAGING {
  SACHET
  JAR
  CARTON_OF_SACHETS
  CARTON_OF_JARS
}

enum COCOA_BAR_PACKAGING {
  BOX_70_PERCENT
  CARTON_70_PERCENT
  BOX_80_PERCENT
  CARTON_80_PERCENT
  BOX_90_PERCENT
  CARTON_90_PERCENT
}

enum PRODUCT_TAG {
  BEST_SELLER
  NEW_ARRIVAL
}

enum DISCOUNT_TYPE {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PAYMENT_STATUS {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PAYMENT_METHOD {
  SHOP_PAY
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum CURRENCY_CODE {
  GHS
  NGN
  USD
}

enum DiscountCodeStatus {
  ACTIVE
  EXPIRED
  DISABLED
}

enum TRANSACTION_TYPE {
  PURCHASE // When inventory is purchased from supplier
  SALE // When sold to customer
  RETURN // When customer returns item
  ADJUSTMENT // Manual inventory adjustment
  RESERVATION // When reserved for cart/order
  RELEASE // When reservation is released
  DAMAGE // When items are marked as damaged
  LOSS // When items are lost
  TRANSFER_IN // Inventory transferred in from another location
  TRANSFER_OUT // Inventory transferred out to another location
}


model AbandonedCart {
  id              String    @id @default(uuid())
  cartId          String    @unique
  cart            Cart      @relation(fields: [cartId], references: [id])
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  lastUpdated     DateTime  @default(now())
  recovered       Boolean   @default(false)
  recoveredAt     DateTime?
  recoveryAttempts Int      @default(0)
  recoveryToken   String?   @unique

  @@index([userId])
  @@index([lastUpdated])
}


model Address {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  type           String
  street         String
  city           String
  state          String
  postalCode     String
  country        String   @default("US")
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shippingOrders Order[]  @relation("OrderShippingAddress")
  billingOrders  Order[]  @relation("OrderBillingAddress")

  @@index([userId, isDefault])
  @@index([postalCode, country])
}


model AppliedGiftCard {
  id                      String   @id @default(uuid())
  cartId                  String
  cart                    Cart     @relation(fields: [cartId], references: [id])
  giftCardId              String
  giftCard                GiftCard @relation(fields: [giftCardId], references: [id])
  amountUsed              Money    @relation("AmountUsedMoney", fields: [amountUsedId], references: [id])
  amountUsedId            String
  balance                 Money    @relation("BalanceMoney", fields: [balanceId], references: [id])
  balanceId               String
  lastCharacters          String
  presentmentAmountUsed   Money    @relation("PresentmentAmountMoney", fields: [presentmentAmountUsedId], references: [id])
  presentmentAmountUsedId String
  createdAt               DateTime @default(now())
}


model AuditLog {
  id        String   @id @default(uuid())
  action    String
  model     String
  modelId   String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  details   Json?
  createdAt DateTime @default(now())

  @@index([model, modelId])
  @@index([userId])
  @@index([createdAt])
}


model Cart {
  id            String             @id @default(uuid())
  userId        String?
  user          User?              @relation("UserCarts", fields: [userId], references: [id])
  sessionId     String?            @unique
  checkoutUrl   String?            @unique
  lines         CartLine[]
  giftCards     AppliedGiftCard[]
  discountCodes CartDiscountCode[]
  note          String?
  totalQuantity Int                @default(0)
  abandonedCart AbandonedCart?
  cost          CartCost?
  order         Order?             @relation(fields: [orderId], references: [id])
  orderId       String?            @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  sessions      Session[]          @relation("CartSessions")

  @@index([userId])
  @@index([sessionId])
  @@index([updatedAt])
  @@index([orderId])
}


model CartCost {
  id                   String   @id @default(uuid())
  cartId               String   @unique
  cart                 Cart     @relation(fields: [cartId], references: [id])
  subtotal             Money    @relation("SubtotalMoney", fields: [subtotalId], references: [id])
  subtotalId           String
  subtotalAmount       Decimal
  totalTax             Money    @relation("TotalTaxMoney", fields: [totalTaxId], references: [id])
  totalTaxId           String
  totalTaxAmount       Decimal
  total                Money    @relation("TotalMoney", fields: [totalId], references: [id])
  totalId              String
  totalAmount          Decimal
  shipping             Money?   @relation("ShippingMoney", fields: [shippingId], references: [id])
  shippingId           String?
  shippingAmount       Decimal?
  discount             Money?   @relation("DiscountMoney", fields: [discountId], references: [id])
  discountId           String?
  discountAmount       Decimal?
  estimatedTax         Money?   @relation("EstimatedTaxMoney", fields: [estimatedTaxId], references: [id])
  estimatedTaxId       String?
  estimatedShipping    Money?   @relation("EstimatedShippingMoney", fields: [estimatedShippingId], references: [id])
  estimatedShippingId  String?
  calculationVersion   Int      @default(1)
  createdAt            DateTime @default(now())
}


model CartDiscountCode {
  id         String             @id @default(uuid())
  cartId     String
  cart       Cart               @relation(fields: [cartId], references: [id])
  code       String             @unique
  applicable Boolean            @default(false)
  usageCount Int                @default(0)
  expiresAt  DateTime?
  status     DiscountCodeStatus @default(ACTIVE)
  createdAt  DateTime           @default(now())

  @@index([cartId])
  @@index([code])
}


model CartLine {
  id                  String               @id @default(uuid())
  cartId              String
  cart                Cart                 @relation(fields: [cartId], references: [id])
  productVariantId    String
  productVariant      ProductVariant       @relation(fields: [productVariantId], references: [id])
  quantity            Int                  @default(1)
  price               Money                @relation("LinePriceMoney", fields: [priceId], references: [id])
  priceId             String
  discountAllocations DiscountAllocation[]
  attributes          Json?
  position            Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([cartId])
  @@index([productVariantId])
  @@index([cartId, position])
}


model Category {
  id          String        @id @default(uuid())
  name        CATEGORY_TYPE @unique
  description String?
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


model Discount {
  id          String               @id @default(uuid())
  code        String               @unique
  type        DISCOUNT_TYPE
  value       Money                @relation("DiscountValue", fields: [valueId], references: [id])
  valueId     String
  minAmount   Money?               @relation("DiscountMinAmount", fields: [minAmountId], references: [id])
  minAmountId String?
  startDate   DateTime
  endDate     DateTime
  maxUses     Int?
  usedCount   Int                  @default(0)
  products    Product[]
  orders      Order[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  allocations DiscountAllocation[]

  @@index([code])
  @@index([startDate, endDate])
}


model DiscountAllocation {
  id         String   @id @default(uuid())
  cartLineId String
  cartLine   CartLine @relation(fields: [cartLineId], references: [id])
  discountId String
  discount   Discount @relation(fields: [discountId], references: [id])
  amount     Money    @relation("DiscountAllocationMoney", fields: [amountId], references: [id])
  amountId   String
  createdAt  DateTime @default(now())

  @@index([cartLineId])
  @@index([discountId])
}


model GiftCard {
  id             String            @id @default(uuid())
  code           String            @unique
  initialValue   Money             @relation("InitialValueMoney", fields: [initialValueId], references: [id])
  initialValueId String
  balance        Money             @relation("GiftCardBalanceMoney", fields: [balanceId], references: [id])
  balanceId      String
  usageCount     Int               @default(0)
  expiresAt      DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  appliedToCarts AppliedGiftCard[]

  @@index([code])
  @@index([expiresAt])
}


model InventoryTransaction {
    id        String           @id @default(uuid())
    variantId String
    variant   ProductVariant   @relation(fields: [variantId], references: [id])
    quantity  Int // Positive for additions, negative for deductions
    type      TRANSACTION_TYPE
    reference String? // Order ID, PO number, etc.
    notes     String? // Additional information about the transaction
    createdAt DateTime         @default(now())
    createdBy String? // User ID or system process that created this

    @@index([variantId])
    @@index([type])
    @@index([reference])
    @@index([createdAt])
}


model Money {
  id                     String               @id @default(uuid())
  amount                 Decimal              @db.Decimal(10, 2)
  currencyCode           CURRENCY_CODE
  createdAt              DateTime             @default(now())
  cartCosts              CartCost[]           @relation("SubtotalMoney")
  giftCards              GiftCard[]           @relation("GiftCardBalanceMoney")
  appliedGiftCards       AppliedGiftCard[]    @relation("AmountUsedMoney")
  cartLines              CartLine[]           @relation("LinePriceMoney")
  payments               Payment[]            @relation("PaymentAmount")
  orders                 Order[]              @relation("OrderSubtotal")
  orderItems             OrderItem[]          @relation("OrderItemPrice")
  productVariants        ProductVariant[]     @relation("VariantPrice")
  discounts              Discount[]           @relation("DiscountValue")
  discountAllocations    DiscountAllocation[] @relation("DiscountAllocationMoney")
  balanceMoney           AppliedGiftCard[]    @relation("BalanceMoney")
  presentmentAmountMoney AppliedGiftCard[]    @relation("PresentmentAmountMoney")
  totalTaxMoney          CartCost[]           @relation("TotalTaxMoney")
  totalMoney             CartCost[]           @relation("TotalMoney")
  shippingMoney          CartCost[]           @relation("ShippingMoney")
  discountMoney          CartCost[]           @relation("DiscountMoney")
  minAmountMoney         Discount[]           @relation("DiscountMinAmount")
  initialValueMoney      GiftCard[]           @relation("InitialValueMoney")
  shippingCostMoney      Order[]              @relation("OrderShippingCost")
  taxAmountMoney         Order[]              @relation("OrderTaxAmount")
  totalOrderMoney        Order[]              @relation("OrderTotal")
  lineTotalMoney         OrderItem[]          @relation("OrderItemTotal")
  estimatedTaxMoney      CartCost[]           @relation("EstimatedTaxMoney")
  estimatedShippingMoney CartCost[]           @relation("EstimatedShippingMoney")
  shippingRatePrices     ShippingRate[]       @relation("ShippingRatePrice")
  shippingRateMinAmounts ShippingRate[]       @relation("ShippingRateMinAmount")
  refundedAmounts        Payment[]            @relation("RefundedAmount")
}


model Notification {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  orderId String?
  order   Order?   @relation(fields: [orderId], references: [id])
  message String
  sentAt  DateTime @default(now())
  read    Boolean  @default(false)
  type    String   // e.g., "order", "promotion", "system"

  @@index([userId, read])
  @@index([orderId])
  @@index([sentAt])
}


model Order {
  id                String         @id @default(uuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  status            ORDER_STATUS   @default(DRAFT)
  trackingCode      String?        @unique
  carrier           String?
  trackingUrl       String?
  items             OrderItem[]
  trackingLogs      TrackingLog[]
  notifications     Notification[]
  shippingAddressId String
  shippingAddress   Address        @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address        @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  discountId        String?
  discount          Discount?      @relation(fields: [discountId], references: [id])
  payments          Payment[]
  shippingCost      Money?         @relation("OrderShippingCost", fields: [shippingCostId], references: [id])
  shippingCostId    String?
  taxRate           Decimal?
  taxAmount         Money?         @relation("OrderTaxAmount", fields: [taxAmountId], references: [id])
  taxAmountId       String?
  subtotal          Money          @relation("OrderSubtotal", fields: [subtotalId], references: [id])
  subtotalId        String
  total             Money          @relation("OrderTotal", fields: [totalId], references: [id])
  totalId           String
  fulfillmentDate   DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  cart              Cart?
  cartId            String?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}


model OrderItem {
  id               String         @id @default(uuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id])
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  quantity         Int
  price            Money          @relation("OrderItemPrice", fields: [priceId], references: [id])
  priceId          String
  lineTotal        Money          @relation("OrderItemTotal", fields: [lineTotalId], references: [id])
  lineTotalId      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([orderId])
  @@index([productVariantId])
}


model Payment {
  id                 String              @id @default(uuid())
  orderId            String
  order              Order               @relation(fields: [orderId], references: [id])
  amount             Money               @relation("PaymentAmount", fields: [amountId], references: [id])
  amountId           String
  status             PAYMENT_STATUS
  method             PAYMENT_METHOD
  transactionId      String?
  shopPayTransaction ShopPayTransaction?
  refundedAmount     Money?              @relation("RefundedAmount", fields: [refundedAmountId], references: [id])
  refundedAmountId   String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([orderId])
  @@index([status])
  @@index([transactionId])
}


model Product {
  id                     String           @id @default(uuid())
  name                   String
  slug                   String           @unique
  descriptionSummary     String?          @db.Text
  descriptionHtml        String?          @db.Text
  tag                    PRODUCT_TAG?
  categoryId             String
  category               Category         @relation(fields: [categoryId], references: [id])
  variants               ProductVariant[]
  images                 String[]
  reviews                Review[]
  totalReviews           Int              @default(0)
  averageRating          Float            @default(0.0)
  averageRatingPrecision Float            @default(0.0)
  discounts              Discount[]
  wishlistItems          Wishlist[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  deletedAt              DateTime?
  taxRates               TaxRate[]        @relation("ProductTaxRates")

  @@index([categoryId])
  @@index([slug])
}


model ProductVariant {
  id                String                 @id @default(uuid())
  productId         String
  product           Product                @relation(fields: [productId], references: [id])
  weight            Int // In grams
  packaging         Json
  price             Money                  @relation("VariantPrice", fields: [priceId], references: [id])
  priceId           String
  stock             Int                    @default(0)
  reservedStock     Int                    @default(0)
  lowStockThreshold Int?                   @default(10)
  sku               String?                @unique
  images            String[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  cartLines         CartLine[]
  orderItems        OrderItem[]
  wishlistItems     Wishlist[]
  transactions      InventoryTransaction[]

  @@index([productId])
  @@index([sku])
  @@index([stock])
  @@index([reservedStock])
}


model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@index([rating])
}


model Session {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  cart      Cart?    @relation("CartSessions", fields: [cartId], references: [id])
  cartId    String?  @unique

  @@index([userId])
  @@index([expiresAt])
}


model ShippingRate {
  id             String        @id @default(uuid())
  zoneId         String
  zone           ShippingZone  @relation(fields: [zoneId], references: [id])
  name           String
  minOrderAmount Money?        @relation("ShippingRateMinAmount", fields: [minOrderAmountId], references: [id])
  minOrderAmountId String?
  price          Money         @relation("ShippingRatePrice", fields: [priceId], references: [id])
  priceId        String
  maxDeliveryDays Int?
  createdAt      DateTime      @default(now())

  @@index([zoneId])
}


model ShippingZone {
  id          String          @id @default(uuid())
  name        String
  countries   String[]
  rates       ShippingRate[]
  isDefault   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([isDefault])
}


model ShopPayTransaction {
  id             String   @id @default(uuid())
  paymentId      String   @unique
  payment        Payment  @relation(fields: [paymentId], references: [id])
  shopPayOrderId String   @unique
  responseData   Json
  createdAt      DateTime @default(now())
}


model TaxRate {
  id          String    @id @default(uuid())
  country     String
  state       String?
  postalCode  String?
  rate        Decimal
  appliesTo   Product[] @relation("ProductTaxRates")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([country, state, postalCode])
}


model TrackingLog {
  id        String       @id @default(uuid())
  orderId   String
  order     Order        @relation(fields: [orderId], references: [id])
  status    ORDER_STATUS
  details   String?
  location  String?
  timestamp DateTime     @default(now())

  @@index([orderId])
  @@index([status])
  @@index([timestamp])
}


model User {
  id                String          @id @default(uuid())
  email             String          @unique
  passwordHash      String
  name              String
  role              USER_ROLE       @default(CUSTOMER)
  verificationToken String?         @unique
  resetToken        String?         @unique
  sessions          Session[]
  orders            Order[]
  carts             Cart[]          @relation("UserCarts")
  abandonedCarts    AbandonedCart[]
  auditLogs         AuditLog[]
  reviews           Review[]
  wishlistItems     Wishlist[]
  addresses         Address[]
  notifications     Notification[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([email])
  @@index([role])
  @@index([verificationToken])
  @@index([resetToken])
  @@index([createdAt])
}


model Wishlist {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  productId        String
  product          Product?       @relation(fields: [productId], references: [id])
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([userId])
  @@index([productId])
}
